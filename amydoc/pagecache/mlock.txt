1、swap
    1、java swap
    学过C语言的人都知道，在C中交换两个变量可以通过指针的方式实现：

    Java中不能直接操作指针变量，int、double、float等基本类型函数传参的时候都是值传递
    也就是传入函数的只是原来变量的一个副本，所以在函数中交换是副本，并达不到交换的目的。

    2、内存swap
        当内存不够用的时候，操作系统将本应该物理存储的一部分内存页调度到磁盘上，
        以腾出足够的空间给当前的进程使用。

        当其他进程需要运行的时候，再从磁盘将内存页调度到物理内存当中，以恢复进程的运行。

        而这个调度过程，则会产生swap I/O, 如果swap I/O较为频繁，将严重地影响系统的性能。

        通过vmstat命令，可以查看I/O情况。

        其中swap 列的
            si:表示每秒从磁盘交换到内存的数据量，单位是KB/s,
            so:表示每秒从内存交换到磁盘的数据量，单位是KB/s。

2、OS脏页写回
    我的理解：是不是就是自动刷入磁盘？

    由于页高速缓存的缓存作用，写操作实际上会被延迟。
    当页高速缓存中的数据比后台存储的数据更新时，那么该数据就被称为脏数据。
    在内存中积累起来的页最终必须被写回磁盘。在以下两种情况发生时，脏页被写回磁盘：

    1. 当空闲的内存低于一个特定的阈值时，内核必须将脏页写回磁盘，以便释放内存。

    2. 当脏页在内存中驻留时间超过一个特定的阈值时，内核必须将超时的脏页写回磁盘，以确保脏页不会无限期地驻留在内存。

3、内存回收

4、mlock
    锁住内存是为了防止这段内存被操作系统swap掉。并且由于此操作风险高，仅超级用户可以执行。


    系统调用 mlock 家族允许程序【在物理内存上锁住它的部分或全部地址空间】。
    这将阻止Linux 将这个内存页调度到交换空间（swap space），即使该程序已有一段时间没有访问这段空间。


























