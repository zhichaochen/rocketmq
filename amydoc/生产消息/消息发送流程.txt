思考题：
    1、消息发送时时异常处理思路

    1）NameServer 宕机

    2）Broker 宕机

1、消息发送源码
    org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl sendDefaultImpl方法源码分析

    DefaultMQProducerImpl#sendDefaultImpl


2、获取topic的路由信息
    1、topic 的路由信息包含哪些内容。
        消息的发布与订阅基于topic,路由发布信息以 topic 维度进行描述。

        Broker 负载消息存储，[一个 topic 可以分布在多台 Broker 上(负载均衡)，每个 Broker 包含多个 Queue]。
        队列元数据基于Broker来描述（QueueData：所在 BrokerName、读队列个数、写队列个数、权限、同步或异步）。

        接下来从源码分析 tryToFindTopicPublishInfo方法，详细了解获取 Topic 的路由信息。


3、获取MessageQueue



5、思考题
    1、NameServer 挂机

        在发送消息阶段，如果生产者本地缓存中没有缓存 topic 的路由信息，则需要从 NameServer 获取，
        只有当所有 NameServer 都不可用时，此时会抛 MQClientException。

        如果所有的 NameServer 全部挂掉，并且生产者有缓存 Topic 的路由信息，此时依然可以发送消息。
        所以，NameServer 的宕机，通常不会对整个消息发送带来什么严重的问题。

    2、Broker挂机
        基础知识：
            消息生产者每隔 30s 从 NameServer 处获取最新的 Broker 存活信息（topic路由信息）
            Broker 每30s 向所有的 NameServer 报告自己的情况，

            故 Broker 的 down 机，Procuder 的最大可感知时间为 60s,在这 60s，消息发送会有什么影响呢？


        此时分两种情况分别进行分析。

        1）启用sendLatencyFaultEnable
            由于使用了故障延迟机制，详细原理见上文详解，会对获取的 MQ 进行可用性验证，
            比如获取一个MessageQueue 发送失败，这时会对该 Broker 进行标记，标记该 Broker 在未来的某段时间内不会被选择到，
            默认为（5分钟，不可改变），所有此时只有当该 topic 全部的 broker 挂掉，才无法发送消息，符合高可用设计。

        2）不启用sendLatencyFaultEnable = false
            此时会出现消息发送失败的情况，
            因为默认情况下，procuder 每次发送消息，会采取轮询机制取下一个 MessageQueue,
            由于可能该 Message 所在的Broker挂掉，会抛出异常。

            因为一个 Broker 默认为一个 topic 分配4个 messageQueue,由于默认只重试2次，故消息有可能发送成功，有可能发送失败。


============================================================================
1、DefaultMqProducerImpl#send
    同步发送，异步发送，OneWay发送。
    异步发送时开启一个线程，发送消息。

    但是都是调用sendDefaultImpl();方法

2、DefaultMqProducerImpl#sendDefaultImpl
























